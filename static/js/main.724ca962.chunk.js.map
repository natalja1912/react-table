{"version":3,"sources":["components/Loading/Loading.js","components/Pagination/Pagination.js","components/Table/Table.js","components/Search/Search.js","components/AddNewUser/AddNewUser.js","components/DisplayDetails/DisplayDetails.js","components/AddUserForm/AddUserForm.js","components/sortItems.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Loading","className","Pagination","itemsPerPage","totalItems","paginate","pageNumbers","i","Math","ceil","push","aria-label","map","number","key","onClick","Table","props","scope","onSort","bind","arrows","arrow1","arrow2","arrow3","arrow4","arrow5","data","length","item","index","onRowSelect","id","firstName","lastName","email","phone","Search","onButtonClick","useState","value","setValue","type","onChange","e","onValueChange","target","AddNewUser","handleUserClick","text","DisplayDetails","defaultValue","description","address","streetAddress","city","state","zip","AddUserForm","values","setValues","handleInputChange","evt","name","placeholder","required","onSubmit","preventDefault","formSubmit","sortItems","sort","a","b","toLowerCase","App","setData","isLoading","setIsLoading","link","setLink","index1","index2","indexes","setIndexes","filter","setFilter","filteredData","setFilteredData","shownData","setShownData","selectedRow","setSelectedRow","displayRow","setDisplayRow","userForm","setUserForm","buttonText","setButtonText","setArrows","useEffect","fetch","then","res","json","catch","error","console","log","finally","slice","search","result","includes","arrowNumber","arrowValue","reverse","row","pageNumber","indexOfLastItem","indexOfFirstItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.724ca962.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loading.css';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div className=\"lds-roller\"><div></div><div></div><div></div><div></div></div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction Pagination({ itemsPerPage, totalItems, paginate }) {\r\n    let pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav aria-label=\"Page navigation example\">\r\n            <ul className=\"pagination\">\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <a onClick={() => paginate(number)} className=\"page-link\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport './Table.css';\r\n\r\n\r\nfunction Table(props) {\r\n \r\n    return (\r\n        //отрисовка таблицы, дизайн таблицы - Bootstrap\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\" onClick={props.onSort.bind(null, 'id', 'arrow1')}>ID {props.arrows.arrow1}</th>\r\n                    <th scope=\"col\" onClick={props.onSort.bind(null, 'firstName', 'arrow2')}>First Name {props.arrows.arrow2}</th>\r\n                    <th scope=\"col\" onClick={props.onSort.bind(null, 'lastName', 'arrow3')}>Last Name {props.arrows.arrow3}</th>\r\n                    <th scope=\"col\" onClick={props.onSort.bind(null, 'email', 'arrow4')}>Email {props.arrows.arrow4}</th>\r\n                    <th scope=\"col\" onClick={props.onSort.bind(null, 'phone', 'arrow5')}>Phone {props.arrows.arrow5}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.data.length > 0 && props.data.map((item, index) =>\r\n                    (<tr onClick={props.onRowSelect.bind(null, item)} className=\"table__row\" key={index}>\r\n                        <th scope=\"row\">{item.id}</th>\r\n                        <td>{item.firstName}</td>\r\n                        <td>{item.lastName}</td>\r\n                        <td>{item.email}</td>\r\n                        <td>{item.phone}</td>\r\n                    </tr>\r\n                    ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, { useState } from 'react';\r\nimport './Search.css';\r\n\r\nfunction Search({ onButtonClick }) {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    function onValueChange(value){\r\n        setValue(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <button className=\"search__button\" onClick={() => onButtonClick(value)}>Поиск</button>\r\n            <input type=\"text\" value={value} onChange={(e) => onValueChange(e.target.value)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './AddNewUser.css';\r\n\r\nfunction AddNewUser({handleUserClick, text}) {\r\n  return (\r\n    <div className=\"user__container\">\r\n        <p className=\"user__text\">Добавить пользователя</p>\r\n        <button onClick={handleUserClick} className=\"user__button\">{text}</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddNewUser;","import React from 'react';\r\nimport './DisplayDetails.css';\r\n\r\nfunction DisplayDetails({ data }) {\r\n\r\n    return (\r\n        <div className=\"display__container\">\r\n            <p>Выбран пользователь <b>{data.firstName + ' ' + data.lastName}</b></p>\r\n            <p>Описание:</p>\r\n            <textarea className=\"display__textarea\" defaultValue={data.description} />\r\n            <p>Адрес проживания: <b>{data.address.streetAddress}</b></p>\r\n            <p>Город: <b>{data.address.city}</b></p>\r\n            <p>Провинция/штат: <b>{data.address.state}</b></p>\r\n            <p>Индекс: <b>{data.address.zip}</b></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayDetails;\r\n\r\n","import React, { useState } from 'react';\r\nimport './AddUserForm.css';\r\n\r\nfunction AddUserForm(props) {\r\n    const [values, setValues] = useState({\r\n        id: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phone: '',\r\n    });\r\n\r\n    function formSubmit(evt) {\r\n        evt.preventDefault();\r\n\r\n    }\r\n\r\n    function handleInputChange(evt) {\r\n        const { name, value } = evt.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\">\r\n            <input name='id' placeholder='id' onChange={(evt) => handleInputChange(evt)}  required />\r\n            <input name='firstName' placeholder='First Name' onChange={(evt) => handleInputChange(evt)}  required />\r\n            <input name='lastName' placeholder='Last Name' onChange={(evt) => handleInputChange(evt)}  required />\r\n            <input name='email' placeholder='Email' type=\"email\" onChange={(evt) => handleInputChange(evt)}  required />\r\n            <input name='phone' placeholder='Phone' onChange={(evt) => handleInputChange(evt)}  required />\r\n            <button onSubmit={(evt) => formSubmit(evt)} onClick={props.onSubmit.bind(null, values)} type='submit' >Добавить</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddUserForm;","\r\n\r\n//функция сортировки данных в таблице для строк и чисел\r\nfunction sortItems(data, key) {\r\n    data.sort(function (a, b) {\r\n        if (typeof a[key] === 'string') {\r\n            //если значения в колонке - строки, то их приводим к нижнему регистру, чтобы правильно выполнить сортировку\r\n            if (a[key].toLowerCase() > b[key].toLowerCase()) {\r\n                return 1;\r\n            }\r\n            if (a[key].toLowerCase() < b[key].toLowerCase()) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        }\r\n        else {\r\n            return (a[key] - b[key])\r\n        }\r\n    });\r\n    return data;\r\n}\r\n\r\n\r\n\r\nexport default sortItems;","import React, { useState, useEffect } from 'react';\r\nimport Loading from '../Loading/Loading';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport Table from '../Table/Table';\r\nimport Search from '../Search/Search';\r\nimport AddNewUser from '../AddNewUser/AddNewUser';\r\nimport DisplayDetails from '../DisplayDetails/DisplayDetails';\r\nimport AddUserForm from '../AddUserForm/AddUserForm';\r\nimport sortItems from '../sortItems';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [link, setLink] = useState('');\r\n  const usersPerPage = 50;\r\n  const [indexes, setIndexes] = useState({ index1: 0, index2: 50 });\r\n  const [filter, setFilter] = useState('');\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [shownData, setShownData] = useState([]);\r\n  const [selectedRow, setSelectedRow] = useState({});\r\n  const [displayRow, setDisplayRow] = useState(false);\r\n  const [userForm, setUserForm] = useState(false);\r\n  const [buttonText, setButtonText] = useState('+');\r\n  const [arrows, setArrows] = useState({\r\n    arrow1: '⇑',\r\n    arrow2: '⇑',\r\n    arrow3: '⇑',\r\n    arrow4: '⇑',\r\n    arrow5: '⇑',\r\n  });\r\n\r\n  const small = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n  const big = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\r\n\r\n  //загрузка данных с сервера\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(link)\r\n      .then((res) => {\r\n        return res.json()\r\n      })\r\n      .then((res) => {\r\n        setData(res);\r\n        setFilteredData(res);\r\n      }\r\n      )\r\n      .catch((error) => console.log(error))\r\n      .finally(() => setIsLoading(false))\r\n  }, [link])\r\n\r\n\r\n  //изменение индексов отображаемых элементов при изменении номера страницы\r\n  function paginate(pageNumber) {\r\n    let indexOfLastItem = pageNumber * usersPerPage;\r\n    let indexOfFirstItem = indexOfLastItem - usersPerPage;\r\n    setIndexes({\r\n      index1: indexOfFirstItem,\r\n      index2: indexOfLastItem,\r\n    })\r\n    setShownData(filteredData.slice(indexOfFirstItem, indexOfLastItem));\r\n  }\r\n\r\n //перезапись массива отображаемых элементов при изменении индексов или отфильтрованных данных\r\n  useEffect(() => {\r\n    setShownData(filteredData.slice(indexes.index1, indexes.index2));\r\n  }, [indexes, filteredData])\r\n\r\n\r\n//перезапись массива отфильтрованных данных при каждом изменении значения фильтра\r\n  useEffect(() => {\r\n    const search = filter.toLowerCase();\r\n    if (search) {\r\n      let result = [];\r\n      result = data.filter(item => item.firstName.toLowerCase().includes(search) || item.lastName.toLowerCase().includes(search) || item.email.toLowerCase().includes(search));\r\n      setFilteredData(result);\r\n    }\r\n    else {\r\n      setFilteredData(data);\r\n    }\r\n  }, [filter, data])\r\n\r\n\r\n  //функция сортировки и переотрисовки элементов при нажатии на заголовок каждой колонки\r\n  function sortBy(key, arrowNumber) {\r\n    let arrowValue = '';\r\n    arrows[arrowNumber] === '⇑' ? arrowValue = '⇓' : arrowValue = '⇑';\r\n    //меняем вид стрелки у нужной колонки при клике на ее заголовок\r\n    setArrows({\r\n      ...arrows,\r\n      [arrowNumber]: arrowValue,\r\n    })\r\n    arrows[arrowNumber] === '⇑' ? sortItems(data, key) : data.reverse();\r\n    setFilteredData(data);\r\n    setShownData(data.slice(indexes.index1, indexes.index2));\r\n  }\r\n\r\n  //функция, которая запускает отрисовку компонента DisplayDetails \r\n  function onRowSelect(row) {\r\n    setSelectedRow(row);\r\n    setDisplayRow(true);\r\n  }\r\n\r\n  //функция для добавления нового пользователя в массив отфильтрованных данных при сабмите формы\r\n  function onSubmit(values) {\r\n    setData([\r\n      values,\r\n      ...filteredData\r\n    ]);\r\n  }\r\n\r\n  //функция, запускающая отрисовку формы для добавления нового пользователя и меняющая текст кнопки\r\n  function handleUserClick() {\r\n    if (!userForm) {\r\n      setUserForm(true);\r\n      setButtonText('-');\r\n    }\r\n    else {\r\n      setUserForm(false);\r\n      setButtonText('+');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className='heading'>Данные пользователей</h1>\r\n      <div>\r\n        <button className='data-button' onClick={() => setLink(small)}>Загрузить данные о 32 пользователях</button>\r\n        <button className='data-button' onClick={() => setLink(big)}>Загрузить данные о всех пользователях</button>\r\n      </div>\r\n\r\n      {isLoading ? <Loading /> :\r\n        <>\r\n          <div className='cover'>\r\n            <Search onButtonClick={setFilter} />\r\n            <AddNewUser handleUserClick={handleUserClick} text={buttonText} />\r\n          </div>\r\n          {userForm && <AddUserForm onSubmit={onSubmit} />}\r\n          <Table data={shownData} arrows={arrows} onSort={sortBy} onRowSelect={onRowSelect} />\r\n          {displayRow && <DisplayDetails data={selectedRow} />}\r\n          <Pagination itemsPerPage={usersPerPage} totalItems={filteredData.length} paginate={paginate} />\r\n        </>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}